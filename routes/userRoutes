const router = require('express').Router();
const User = require('../models/user');
const {jwtAuthMiddleware, generateToken} = require('../jwt');

// create a new user
router.post('/signup', async (req, res) => {
   try {
      const data = req.body;
      // check if admin already exists
      const adminUser = await User.findOne({role: 'admin'});
      if(data.role === 'admin' && adminUser)
         return res.status(400).json({message: 'Admin already exists'});

      const newUser = new User(data);
      const response = await newUser.save();
      console.log('User created');

      const payload = {
         id: response.id
      }

      const token = generateToken(payload);
      res.status(200).json({token});
   }
   catch (err) {
      console.error(err);
      res.status(500).json({message: 'Internal server error'});
   }
})

//login existing user

router.post('/login', async (req, res) => {
   try {
      const {aadharCardNumber, password} = req.body;

      if (!aadharCardNumber || !password) 
         return res.status(400).json({message: 'credentials required'});

      const user = await User.findOne({aadharCardNumber});

      if (!user || !(await user.comparePassword(password)))
         return res.status(401).json({message: 'Invalid Aadhar number or password'});

      const payload = {
         id: user.id
      }
      const token = generateToken(payload);
      res.status(200).json({token});
   }
   catch (err) {
      console.error(err);
      res.status(500).json({message: 'Internal server error'});
   }
});

// get user profile

router.get('/profile', jwtAuthMiddleware, async (req, res) => {
   try {
      const userId = req.user.id;
      const user = await User.findById(userId);
      res.status(200).json({user});
   }
   catch (err) {
      console.error(err);
      res.status(500).json({message: 'Internal server error'});
   }
});

// update user password

router.put('/profile/password', jwtAuthMiddleware, async (req, res) => {
   try {
      // Extract the user id from the token
      const userId = req.user.id;
      const {currentPassword, newPassword} = req.body;

      // find the user in the database by id
      const user = await User.findById(userId);

      // compare the current password with the one in the database
      if (!(await user.comparePassword(currentPassword)))
         return res.status(401).json({error: 'Invalid password'});

      // update the password
      user.password = newPassword;
      await user.save();

      console.log('Password updated');
      res.status(200).json({message: 'Password updated'});
   }
   catch (error) { 
      console.error(err);
      res.status(500).json({message: 'Internal server error'});
   }
});

module.exports = router;